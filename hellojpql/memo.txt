1. select m from Member as m where m.age > 18
2. 엔티티와 속성은 대소문자 구분 함. (Member, age)
3. JPQL 키워드는 대소문자 구분X (SELECT, FROM, WHERE 등)
4. 엔티티 이름을 사용, 테이블 이름 아님.
5. 별칭은 필수이다. (m) as는 생략 가능.

[TypeQuery, Query]
- TypeQuery : 반환 타입이 명확할 때 사용.
- Query : 반환 타입이 명확하지않을 때 사용.

결과 조회 API
- query.getResultList() : 결과가 하나 이상일 때 , 리스트 반환 => 결과가 없으면 빈 리스트 반환. > nullPoint 터질 일 없음.
- query.getSingleResult() : 결과가 정확히 하나, 단일 객체 반환

[프로젝션]
- SELECT 절에 조회할 대상을 지정하는 것
- 프로젝션 대상: 엔티티 임베디드 타입, 스칼라 타입(숫자, 문자등 기본 데이터 타입)
1. SELECT m FROM Member m : 엔티티프로젝션
2. SELECT m.team FROM Member m : 엔티티 프로젝션 => List<Address> resultList = em.createQuery("select o.address from Order o", Address.class).getResultList();
3. SELECT m.address FROM Member m : 임베디드 타입 프로젝션
4. SELECT m.username, m.age FROM Member m : 스칼라 타입 프로젝션
5. DISTINCT 로 중복 제거.

[프로젝션 - 여러 값 조회]
1. Query 타입으로 조회
2. Object[] 타입으로 조회
3. new 명령어로 조회
    - 단순 값을 DTO로 바로 조회
    - SELECT new jpabook.jpql.UserDTO(m.username,m.age) FROM Member m
    - 패키지 명을 포함한 전체 클래스 명 입력
    - 순서와 타입이 일치하는 생성자 필요

[페이징 API]
- JPA 는 페이징을 다음 두 API 로 추상화
- setFirstResult(int startPosition) : 조회 시작 위치.
- setMaxResult(int maxResult) : 조회할 데이터 수.

[조인]
- 내부 조인 :
    SELECT m FROM Member m [INNER] JOIN m.team t;
- 외부 조인 :
    SELECT m FROM Member m LEFT[OUTER] JOIN m.team t;
- 세타 조인 :
    select count(m) from Member m, Team t where m.username = t.name;

[조인 - on 절]
- On 절을 활용한 조인(JPA 2.1부터 지원)
- 조인 대상 필터링
- 연관관계 없은 엔티티 외부 조인(하이버네이트 5.1부터)

[on절]
예 ) 회원과 팀을 조인하면서, 팀 이름이 A인 팀만 조인
JPQL:
    SELECT m,t FROM Member m LEFT JOIN m.team t on t.name = 'A'

SQL :
 SELECT m.*, t.* FROM Member m LEFT JOIN Team t ON m.TEAM_ID = t.id and t.name = 'A'

 [연관 관계 없는 엔티티 외부 조인]
 예 ) 회원의 이름과 팀의 이름이 같은 대상 외부 조인
 JPQL:
    SELECT m, t FROM Member m LEFT JOIN Team t on m.username = t.name

 SQL:
    SELECT m.*, t.* FROM Member m LEFT JOIN Team t ON m.username = t.name


[서브 쿼리]
- 나이가 평균보다 많은 회원
    select m from Member m where m.age > (select avg(m2.age) from Member m2)
- 한 건이라도 주문한 고객
    select m from Member m where (select count(o) from Order o where m = o.member) > 0

[서브 쿼리 지원 함수]
- [NOT] EXISTS (subquery) : 서브쿼리에 결과가 존재하면 참.
    - {ALL/ANY/SOME} (subquery)
    - ALL 모두 만족하면 참
    - ANY, SOME : 같은 의미, 조건을 하나라도 만족하면 참.
- [NOT] IN(subquery) : 서브쿼리의 결과 중 하나라도 같은 것이 있으면 참.

[JPA 서브 쿼리 한계]
- JPA 는 WHERE, HAVING 절에서만 서브 쿼리 사용 가능.
- SELECT 에서도 가능.
- FROM 절의 서브 쿼리는 현재 JPQL 에서 불가능. : JOIN 으로 풀 수 있으면 풀어서 해결.

[JPQL 의 타입 표현]
- 문자: 'Hello'
- 숫자 : 10L(Long), 10D(Double), 10F(Float)
- Boolean : TRUE, FALSE
- ENUM : jpabook.MemberType.ADMIN
- 엔티티 타입 : TYPE(m) = Member (상속 관계에서 사용)

[JPQL 의 기본 함수]
- CONCAT
- SUBSTRING
- TRIM
- LOWER, UPPER
- LENGTH
- LOCATE
- ABS, SQRT, MOD
- SIZE, INDEX (JPA 용도.)

[경로 표현식]
- .을 찍어 객체 그래프를 탐색하는것.
    select m.username -> 상태 필드
       from Member m
       join m.team t -> 단일 값 연관 필드
       join m.orders o -> 컬렉션 값 연관 필드
    where t.name = '팀A'

[경로 표현식 용어 정리]
- 상태 필드(state field) : 단순히 값을 저장하기 위한 필드 - 경로 탐색의 끝, 탐색 X
- 연관 필드(association field) : 연관 관계를 위한 필드
    - 단일 값 연관 필드:
        @ManyToOne, @OneToOne, 대상이 엔티티(ex: m.team)
    - 컬렉션 값 연관 필드:
        From 절에서 명시적 조인을 통해 별칭을 얻으면 별칭을 통해 탐색 기능능        @OneToMany, @ManyToMany, 대상이 컬렉션(ex: m.orders)


[명시적 조인, 묵시적 조인]
- 명시적 조인 : join 키워드 직접 사용
    select m from Member m join m.team t;
- 묵시적 조인 : 경로 표현식에 의해 묵시적으로 SQL 조인 발생 (내부 조인만 가능)
    select m.team from Member m

경로 탐색을 사용한 묵시적 조인 시 주의 사항
- 항상 내부 조인
- 컬렉션은 경로 탐색의 끝, 명시적 조인을 통해 별칭을 얻어야 함.
- 경로 탐색은 주로 SELECT, WHERE 절에서 사용하지만 묵시적 조인으로 인해 SQL 의 FROM 절에 영향을 줌.
- 실무 할때 가급적 묵시적 조인 대신에 명시적 조인 사용
- 조인은 SQL 튜닝에 중요 포인트
- 묵시적 조인은 조인이 일어나는 상황을 한눈에 파악하기 어려움

[JPQL fetch join]
- SQL 조인 종류X
- JPQL 에서 성능 최적화를 위해 제공하는 기능
- *연관된 엔티티나 컬렉션을 SQL 한번에 함께 조회하는 기능
- join fetch 명령어 사용

[컬렉션 페치 조인]
- 일대다 관계, 컬렉션 페치 조인
- [JPQL]
    select t from Team t join fetch t.members
    where t.name = "팀A"
- [SQL]
    select t.*, m.*
    from team t inner join member m on t.id = m.team_id
    where t.name = '팀A'

[페치 조인과 DISTINCT]
- SQL 의 DISTINCT 는 중복된 결과를 제거하는 명령
- JPQL 의 DISTINCT 2가지 기능 제공
    1. SQL 에 DISTINCT 를 추가
    2. 애플리케이션에서 엔티티 중복 제거
select distinct t from Team join fetch t.members where t.name = '팀A'
SQL 에 DISTINCT 를 추가하지만 데이터가  다르므로 SQL 결과에서 중복제거 실패.

- DISTINCT 가 추가로 애플리케이션에서 중복 제거 시도.
- 같은 식별자를 가진 Team 엔티티 제거.

[페치 조인과 일반 조인의 차이]
- JPQL 은 결과를 반환할 때 연관관계 고려X
- 단지 SELECT 절에 지정한 엔티티만 조회할 뿐.
- 여기서는 팀 엔티티만 조회하고, 회원 엔티티는 조회X
- 페치 조인을 사용할 때만 연관된 엔티티도 함께 조회(즉시로딩)
- 페치 조인은 객체 그래프를 SQL 한번에 조회하는 개념
- 페치 조인은 연관된 엔티티를 함께 조회함.


[페치조인의 특징과 한계]
- 페치 조인 대상에는 별칭을 줄 수 없다. (하이버네이트는 가능, 가급적 사용 X)
- 둘 이상의 컬렉션은 페치 조인 할 수 없다.
- 컬렉션을 페치 조인하면 페이징 API 를 사용 할 수 없다.
- 연관된 엔티티들을 SQL 한 번으로 조히 - 성능최적화
- 엔티티에 직접 적용하는 글로벌 로딩 전략보다 우선함. @OneToMany(fetch=FetchType.LAZY)
- 실무에서 글로벌 로딩 전략은 모두 지연 로딩
- 최적화가 필요한 곳은 페치 조인 적용
- 모든 것을 페치 조인으로 해결할 수는 없음
- 페치 조인은 객체 그래프를 유지할 때 사용하면 효과적
- 여러 테이블을 조인해서 엔티티가 가진 모양이 아닌 전혀 다른 결과를 내야 하면,
- 페치 조인보다는 일반 조인을 사용하고 필요한 데이터들만 조회해서 DTO 로 반환하는 것이 효과적








